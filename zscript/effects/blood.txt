// Blood
class NTM_Blood : Blood replaces Blood {
	Default {
		+NotOnAutomap
	}
	
	States {
		Spawn:
			BLUD C 8 NoDelay A_SpawnDebris("NTM_FlyingBlood", true, 1, 0.5);
			BLUD B 8;
			BLUD A 8;
			Stop;
	}
}

// Flying Blood
class NTM_FlyingBlood : NTM_Gib {
	Default {
		Health 1;
		Scale 0.5;
	}
	
	States {
		Spawn:
			NBLO A 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO A 1;
			NBLO A 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO B 1;
			NBLO B 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO B 1;
			NBLO C 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO C 1;
			NBLO C 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO D 1;
			NBLO D 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO D 1;
			Loop;
			
		Crash:
			TNT1 A 0 {
				if (Random(0, 1)) {
					A_StartSound("NTM_FlyingBlood/splat");
				}
			}
			
			TNT1 A 0 A_SpawnItem("NTM_BloodSplash", 0, 0, 0, true);
			Stop;
	}
}

// Blood Trail
class NTM_BloodTrail : NTM_FlyingBlood {
	Default {
		Gravity 0.36;
	}
	
	States {
		Spawn:
			NBTR ABCD 3;
		Crash:
			TNT1 A 0;
			Stop;
	}
}

// Blood Splash
class NTM_BloodSplash : Actor {
	Default {
		Scale 0.5;
		FloatBobPhase 0;
		
		+NoInteraction
		+MoveWithSector
		+NotOnAutomap
		+DontSplash
	}
	
	States {
		Spawn:
			NBLX A 3 NoDelay A_SpawnItemEx("NTM_BloodSpot", flags: SXF_TransferTranslation, failChance: 128);
			NBLX BCDEF 3;
			Stop;
	}
}

// Blood Spot
class NTM_BloodSpot : NTM_BloodSplash {
	Default {
		Scale 0.625;
	}
	
	States {
		Spawn:
			NBLS A 350;
			Stop;
	}
	
	override void PostBeginPlay() {
		if (!(self is "NTM_BloodyFootprint")) {
			angle = RandomPick(0, 90, 180, 270);
		}
		
		Super.PostBeginPlay();
		
		if (pos.z > floorZ) {
			Destroy();
			
			return;
		}
		
		// Align to floor
		Vector3 norm;
		
		pitch = 0;
		roll = 0;
		
		FLineTraceData hit;
		
		LineTrace(0, height + 16, -90, flags: TRF_ThruActors | TRF_NoSky, data: hit);
		
		if (hit.hit3DFloor) {
			F3DFloor ff = hit.hit3DFloor;
			
			norm = -ff.top.normal;
		} else {
			norm = curSector.floorPlane.normal;
		}
		
		if (abs(norm.z) ~== 1) {
			return;		
		}
		
		double ang = DeltaAngle(VectorAngle(norm.x, norm.y), angle);
		double pch = 90 - ASin(norm.z);
		
		if (pch > 90) {
			pch -= 180;
		}
		
		pitch = pch * Cos(ang);
		roll = pch * Sin(ang);
	}
}

// Flying Gib 1
class NTM_FlyingGib1 : NTM_FlyingBlood {
	Default {
		+FloorClip
	}
	
	States {
		Spawn:
			NGI1 A 0;
		Spawn2:
			#### A 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### A 1;
			#### A 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### B 1;
			#### B 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### B 1;
			#### C 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### C 1;
			#### C 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### D 1;
			#### D 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### D 1;
			Loop;
		
		Crash:
			#### E -1 {
				A_QueueCorpse();
				A_StartSound("NTM_FlyingGib/splat");
				vel.xy *= 0;
				bYFlip = false;
			}
			
			Stop;
	}
}

// Flying Gib 2
class NTM_FlyingGib2 : NTM_FlyingGib1 {
	States {
		Spawn:
			NGI2 A 0;
			Goto Spawn2;
	}
}

// Flying Gib 3
class NTM_FlyingGib3 : NTM_FlyingGib1 {
	States {
		Spawn:
			NGI3 A 0;
			Goto Spawn2;
	}
}

// Gib Meat
class NTM_GibMeat : RealGibs {
	Default {
		Radius 3;
		
		+ForceYBillboard
	}
	
	States {
		Spawn:
			NGIB D -1;
			Stop;
	}
	
	override void BeginPlay() {
		if (Abs(ceilingZ - pos.z) > 16) {
			Destroy();
			
			return;
		}
		
		Super.BeginPlay();
	}
	
	override void Tick() {
		Super.Tick();
		scale.y = (ceilingZ - pos.z) * 0.0204081632653061;
	}
}

// Blood Pool
class NTM_BloodPool : NTM_BloodSpot {
	bool end;
	
	Default {
		Scale 1;
		Radius 32;
		
		+Special
		-NoInteraction
	}
	
	States {
		Spawn:
			NBLP A 200 A_QueueCorpse();
			NBLP B -1;
			Stop;
	}
	
	override void Touch(Actor other) {
		if (other && other is "PlayerPawn") {
			let a = NTM_System_Actor(other.FindInventory("NTM_System_Actor", true));
			
			if (a) {
				a.footprintBloodPool = self;
				a.footprintTics = 100;
				
				if (other.vel.Length() > 0.5) {
					A_SetSize(radius - 0.28);
					A_SetScale(scale.x - 0.01);
				}
				
				if (scale.x < 0.01) {
					end = true;
				}
			}
		}
	}
	
	override void Tick() {
		Super.Tick();
		
		if (end) {
			Destroy();
		}
	}
}

// Bloody Footprint
class NTM_BloodyFootprint : NTM_BloodSpot {
	Default {
		Scale 0.48;
		
		+FloorClip
	}
	
	States {
		Spawn:
			NBLF A 350;
			Stop;
	}
}