class NTM_SpiderMastermind : NTM_Boss {
	Default {
		Health 3000;
		Radius 96;
		Height 100;
		Mass 1000;
		Speed 12;
		PainChance 40;
		SeeSound "spider/sight";
		AttackSound "spider/shoot";
		PainSound "spider/pain";
		DeathSound "spider/death";
		ActiveSound "spider/active";
		Obituary "$OB_SPIDER";
		Tag "$FN_SPIDER";
		Species "SpiderMastermind";
		NTM_Enemy.TicsPerChase 3;
		
		+E3M8Boss
		+E4M8Boss
	}
	
	States {
		Spawn:
			NSPI A 10 A_Look;
			Loop;
			
		DukeSee:
			NSPI A 0 A_NTM_SpiderMetal;
			NSPI AABBCC 3 A_NTM_DukeChase;
			NSPI D 0 A_NTM_SpiderMetal;
			NSPI DDEEFF 3 A_NTM_DukeChase;
			Loop;
		
		BloodSee:
			NSPI A 0 A_NTM_SpiderMetal;
			NSPI AABBCC 3 A_NTM_BloodChase;
			NSPI D 0 A_NTM_SpiderMetal;
			NSPI DDEEFF 3 A_NTM_BloodChase;
			Loop;
		
		SWSee:
			NSPI A 0 A_NTM_SpiderMetal;
			NSPI A 1 A_NTM_SWChase;
			NSPI AA 1 A_NTM_SWChase2;
			NSPI A 1 A_NTM_SWChase;
			NSPI AA 1 A_NTM_SWChase2;
			NSPI B 1 A_NTM_SWChase;
			NSPI BB 1 A_NTM_SWChase2;
			NSPI B 1 A_NTM_SWChase;
			NSPI BB 1 A_NTM_SWChase2;
			NSPI C 1 A_NTM_SWChase;
			NSPI CC 1 A_NTM_SWChase2;
			NSPI C 1 A_NTM_SWChase;
			NSPI CC 1 A_NTM_SWChase2;
			NSPI D 0 A_NTM_SpiderMetal;
			NSPI D 1 A_NTM_SWChase;
			NSPI DD 1 A_NTM_SWChase2;
			NSPI D 1 A_NTM_SWChase;
			NSPI DD 1 A_NTM_SWChase2;
			NSPI E 1 A_NTM_SWChase;
			NSPI EE 1 A_NTM_SWChase2;
			NSPI E 1 A_NTM_SWChase;
			NSPI EE 1 A_NTM_SWChase2;
			NSPI F 1 A_NTM_SWChase;
			NSPI FF 1 A_NTM_SWChase2;
			NSPI F 1 A_NTM_SWChase;
			NSPI FF 1 A_NTM_SWChase2;
			Loop;
			
		Missile:
			NSPI A 0 {
				// Try to summon minions (max. 4-6)
				int skill = G_SkillPropertyInt(7);
				int ran = Random(0, 256);
				
				if ((skill >= 3 && ran <= 64) || (skill >= 1 && ran <= 32)) {
					int limit = 4;
					ThinkerIterator it = ThinkerIterator.Create("Arachnotron");
					Actor mo;
					
					while (mo = Actor(it.Next())) {
						/* There is a 50% chance for the iterator to ignore a
						   dead Arachnotron. This means that the Spider
						   Mastermind can still summon them, but more corpses
						   means lower chances. */
						if (mo.health > 0 || Random(0, 1)) {
							--limit;
						}
					}
					
					if (limit > 0) {
						SetStateLabel("Missile2");
					}
				}
			}
			
			NSPI A 18 A_FaceTarget;
			
			NSPI GHGHGHGHGH 3 Bright {
				A_FaceTarget();
				A_CustomBulletAttack(20, 10, 3, 3);
			}
			
			NSPI H 0 A_SpidRefire;
			NSPI H 0 A_Jump(10, "See");
			Goto Missile + 2;
		
		Missile2:
			NSPI T 8 A_NTM_PainDisable;
			NSPI U 8;
			NSPI V 30 Bright A_StartSound("spider/attack");
			
			NSPI V 20 Bright {
				int minions = Random(2, 4);
				int spawnRadius = 150;
				
				for (int i = 0; i < 360; i += 90) {
					Vector3 spawnPos = pos + (cos(i) * spawnRadius, sin(i) * spawnRadius, 0);
					
					spawnPos.z = GetZAt(spawnPos.x, spawnPos.y, 0, GZF_AbsolutePos | GZF_AbsoluteAng);
					
					Actor baby = Spawn("Arachnotron", spawnPos, Allow_Replace);
					
					if (baby) {
						if (baby.curSector && baby.CheckMove(baby.pos.xy)) {
							baby.A_StartSound("spider/summon", Chan_Body, ChanF_Overlap);
							baby.A_SpawnItemEx("NTM_SpiderMastermindFire");
							baby.master = self;
							baby.CopyFriendliness(self, true);
							baby.SetStateLabel("See");
						} else {
							baby.Destroy();
						}
					}
					
					if (--minions <= 0) {
						break;
					}
				}
			}
			
			NSPI U 8;
			NSPI T 8;
			NSPI T 0 A_NTM_PainEnable;
			Goto See;
			
		Pain:
			NSPI I 6 A_Pain;
			Goto See;
			
		Death:
			NSPI I 1 {
				// GROSS HACK: We still have a sprite with rotations during
				//             this sequence, disable randomly mirroring the
				//             corpse for now.
				A_NTM_PreDeath();
				bXFlip = false;
			}
			
			NSPI I 9 A_NTM_Death;
			NSPI IIIIII 8 A_NTM_BossDeath;
			
			NSPI J 8 {
				A_NTM_BossDeath();
				bXFlip = Random(0, 1);
			}
			
			NSPI KL 8 A_NTM_BossDeath;
			NSPI M 8 Bright A_NTM_BossDeath;
			NSPI N 8 Bright A_NoBlocking;
			NSPI O 8 Bright;
			NSPI PQR 8;
			NSPI S 64;
			NSPI S -1 A_BossDeath;
			Stop;
	}
	
	action void A_NTM_SpiderMetal() {
		A_StartSound("spider/walk", Chan_Body, ChanF_Overlap);
	}
}

class NTM_SpiderMastermindFire : ArchvileFire {
	Default {
		Translation "NTM_Explosion_ArchVile";
		XScale 4;
		YScale 0;
	}
	
	States {
		Spawn:
			NFIR ABCDEFGHIJKLMN 1 Bright;
			Loop;
	}
	
	override void Tick() {
		super.Tick();
		scale += (-0.25, 0.25);
		
		if (scale.x <= 0) {
			Destroy();
		}
	}
}