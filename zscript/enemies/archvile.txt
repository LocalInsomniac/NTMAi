class NTM_ArchVile : NTM_Enemy {
	Default {
		Health 700;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 15;
		PainChance 10;
		MaxTargetRange 896;
		SeeSound "vile/sight";
		PainSound "vile/pain";
		DeathSound "vile/death";
		ActiveSound "vile/active";
		MeleeSound "vile/stop";
		Obituary "$OB_VILE";
		Tag "$FN_ARCH";
		Species "Archvile";
		NTM_Enemy.TicsPerChase 2;
		
		+QuickToRetaliate
		+NoTarget
	}
	
	States {
		Spawn:
			NARC A 10 A_Look;
			Loop;
			
		DukeSee:
			NARC AABBCCDDEEFF 2 A_NTM_DukeChase(true);
			Loop;
		
		BloodSee:
			NARC AABBCCDDEEFF 2 A_NTM_BloodChase(true);
			Loop;
		
		SWSee:
			NARC A 1 A_NTM_SWChase(true);
			NARC A 1 A_NTM_SWChase2;
			NARC A 1 A_NTM_SWChase(true);
			NARC A 1 A_NTM_SWChase2;
			NARC B 1 A_NTM_SWChase(true);
			NARC B 1 A_NTM_SWChase2;
			NARC B 1 A_NTM_SWChase(true);
			NARC B 1 A_NTM_SWChase2;
			NARC C 1 A_NTM_SWChase(true);
			NARC C 1 A_NTM_SWChase2;
			NARC C 1 A_NTM_SWChase(true);
			NARC C 1 A_NTM_SWChase2;
			NARC D 1 A_NTM_SWChase(true);
			NARC D 1 A_NTM_SWChase2;
			NARC D 1 A_NTM_SWChase(true);
			NARC D 1 A_NTM_SWChase2;
			NARC E 1 A_NTM_SWChase(true);
			NARC E 1 A_NTM_SWChase2;
			NARC E 1 A_NTM_SWChase(true);
			NARC E 1 A_NTM_SWChase2;
			NARC F 1 A_NTM_SWChase(true);
			NARC F 1 A_NTM_SWChase2;
			NARC F 1 A_NTM_SWChase(true);
			NARC F 1 A_NTM_SWChase2;
			Goto See;
			
		Missile:
			NARC G 10 Bright {
				A_StartSound("vile/start", Chan_Weapon, ChanF_Overlap);
				A_FaceTarget();
			}
			
			NARC H 8 Bright A_VileTarget("NTM_ArchVileFire");
			NARC IJKLMN 8 Bright A_FaceTarget;
			
			NARC O 8 Bright {
				if (target) {
					A_FaceTarget();
					
					if (CheckSight(target)) {
						A_StartSound("vile/stop", Chan_Weapon, ChanF_Overlap);
						
						Vector3 boomPos = target.Vec3Angle(24, target.angle, 0);
						int newDmg = target.DamageMObj(self, self, 20, "Fire");
						
						if (target) {
							target.TraceBleed(newDmg > 0 ? newDmg : 20, self);
						}
						
						// Explode the target
						Actor boom = Spawn("NTM_ArchVileExplosion", boomPos);
						
						if (boom) {
							boom.A_StartSound("vile/stop");
							NTMAi.Explode(boom, 70, 70, XF_NoSplash, "Fire");
						}
						
						if (target && !target.bDontThrust) {
							double m = Max(1, target.mass);
							
							target.vel.z = 1000 / m;
						}
					}
				}
			}
			
			NARC P 10 Bright;
			Goto See;
			
		Heal:
			NARC Z[ 15 Bright;
			Goto See;
			
		Pain:
			NARC Q 10 A_Pain;
			Goto See;
			
		Death:
			NARC R 1 A_NTM_PreDeath;
			NARC R 5 A_NTM_Death;
			NARC S 6 A_NoBlocking;
			NARC TUVWX 6;
			NARC Y -1;
			Stop;
	}
}

class NTM_ArchVileFire : ArchvileFire {
	bool die;
	
	Default {
		Translation "NTM_Explosion_ArchVile";
		XScale 2.5;
		YScale 0;
	}
	
	States {
		Spawn:
			NFIR A 0 NoDelay A_StartSound("vile/firestrt", Chan_Body, ChanF_Overlap);
			NFIR ABCDEFGHIJKLMN 1 Bright;
			NFIR N 0 A_StartSound("vile/firecrkl", Chan_Body, ChanF_Overlap, 0.64);
			Goto Spawn + 1;
	}
	
	override void Tick() {
		super.Tick();
		
		// Snap to target while it's in attacker's sight
		if (target && tracer && target.CheckSight(tracer)) {
			SetOrigin(tracer.Vec3Angle(24, tracer.angle), true);
		}
		
		int age = GetAge();
		
		if (age < 30) {
			scale += (-0.04167, 0.04167);
		}
		
		// Disappear when blasting or attacker is hurt
		if (die || age > 50 || !target || target.health <= 0 || target.curState == target.FindState("Pain")) {
			die = true;
			scale += (-0.125, 0.125);
			
			if (scale.x <= 0) {
				Destroy();
			}
		}
	}
}

class NTM_ArchVileExplosion : ArchvileFire {
	Default {
		Translation "NTM_Explosion_ArchVile";
		Scale 0.8;
		
		+NotOnAutoMap
	}
	
	States {
		Spawn:
			NEX3 ABCDEFGHIJKLMNOPQ 2 Bright;
			Stop;
	}
}