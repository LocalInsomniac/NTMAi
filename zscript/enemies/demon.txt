class NTM_Demon : NTM_Enemy {
	Default {
		Health 150;
		PainChance 180;
		Speed 13;
		Radius 30;
		Height 56;
		Mass 400;
		SeeSound "demon/sight";
		PushSound "demon/attack";
		AttackSound "demon/melee";
		PainSound "demon/pain";
		DeathSound "demon/death";
		ActiveSound "demon/active";
		Obituary "$OB_DEMONHIT";
		Tag "$FN_DEMON";
		Species "Demon";
		MeleeRange 48;
		MeleeThreshold 80;
		MaxTargetRange 256;
		MaxDropOffHeight 80;
		NTM_Enemy.TicsPerChase 2;
	}
	
	States {
		Spawn:
			NDEM A 10 Fast A_Look;
			Loop;
		
		DukeSee:
			NDEM AABBCCDD 2 Fast A_NTM_DukeChase;
			Goto JumpStart;
		
		BloodSee:
			NDEM AABBCCDD 2 Fast A_NTM_BloodChase;
			Goto JumpStart;
		
		SWSee:
			NDEM A 1 A_NTM_SWChase;
			NDEM A 1 A_NTM_SWChase2;
			NDEM A 1 A_NTM_SWChase;
			NDEM A 1 A_NTM_SWChase2;
			NDEM B 1 A_NTM_SWChase;
			NDEM B 1 A_NTM_SWChase2;
			NDEM B 1 A_NTM_SWChase;
			NDEM B 1 A_NTM_SWChase2;
			NDEM C 1 A_NTM_SWChase;
			NDEM C 1 A_NTM_SWChase2;
			NDEM C 1 A_NTM_SWChase;
			NDEM C 1 A_NTM_SWChase2;
			NDEM D 1 A_NTM_SWChase;
			NDEM D 1 A_NTM_SWChase2;
			NDEM D 1 A_NTM_SWChase;
			NDEM D 1 A_NTM_SWChase2;
			Goto JumpStart;
		
		JumpStart:
			#### # 0 {
				if (target) {
					double dist = Distance2D(target);
					
					if (dist > meleeThreshold && dist < maxTargetRange) {
						bCanPass = false;
						bNoDropOff = false;
						dist -= (target.radius * 2) + radius;
						
						// Check if we can jump towards the player
						bool canJump = true;
						Vector2 deltaPos = AngleToVector(AngleTo(target, true), radius);
						Vector3 checkPos = pos;
						
						for (int i = 0; i < dist; i += radius) {
							checkPos += deltaPos;
							
							if (!CheckMove(checkPos.xy)) {
								canJump = false;
								
								break;
							}
						}
						
						bCanPass = true;
						
						if (canJump) {
							SetStateLabel("Jump");
						}
					}
				}
			}
			
			Goto See;
		
		Jump:
			NDEM H 5 Fast A_FaceTarget;
			
			NDEM N 0 {
				A_NTM_PainDisable();
				A_FaceTarget();
				A_ChangeVelocity(15, 0, 8.5, CVF_Relative | CVF_Replace);
			}
			
			NDEM N 1;
			NDEM NN 1 A_NTM_SargJump;
			NDEM N 1 A_NTM_SargJump(true);
		JumpLoop:
			NDEM N 0 A_JumpIfTargetInsideMeleeRange("JumpMelee");
			NDEM N 1 A_JumpIf(vel.z <= 0 && CheckOnGround(), "JumpEnd");
			Loop;
		
		JumpMelee:
			NDEM N 0 A_StartSound(attackSound, flags: ChanF_Overlap);
			Goto Melee;
			
		JumpEnd:
			NDEM N 0 {
				A_ScaleVelocity(0);
				A_NTM_PainEnable();
			}
			
			Goto See;
		
		Melee:
			NDEM EF 7 Fast A_FaceTarget;
			NDEM G 7 Fast A_SargAttack;
			NDEM G 0 A_NTM_PainEnable;
			Goto See;
		
		Pain:
			NDEM H 4 Fast A_Pain;
			Goto See;
		
		Death:
			NDEM I 1 A_NTM_PreDeath;
			NDEM I 4 A_NTM_Death;
			NDEM J 5 A_Scream;
			NDEM K 5 A_NoBlocking;
			NDEM L 5;
			NDEM M -1;
			Stop;
		
		Raise:
			NDEM MLKJI 5;
			Goto See;
	}
	
	action void A_NTM_SargJump(bool playSound = false) {
		if (vel.xy.Length() <= 0) {
			// Not a good place to jump, abort
			vel.z = 0;
			SetStateLabel("See");
		} else {
			if (playSound) {
				// GROSS HACK: Use PushSound to play Demon's jumping sound
				A_StartSound(pushSound);
			}
		}
	}
}

class NTM_Spectre : NTM_Demon {
	Default {
		RenderStyle "Stencil";
		Alpha 0.3;
		SeeSound "spectre/sight";
		PushSound "spectre/attack";
		AttackSound "spectre/melee";
		PainSound "spectre/pain";
		DeathSound "spectre/death";
		ActiveSound "spectre/active";
		Obituary "$OB_SPECTREHIT";
		Tag "$FN_SPECTRE";
		
		+Shadow
	}
}