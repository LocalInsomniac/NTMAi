#include "zscript/lib/md5/md5.txt"

class NTMAi : EventHandler {
	bool bADMORTEM, bEviternity, bMAYhem2019, bScythe2, bValiant;
	
	static void LumpPrintHash(string lumpName) {
		int lump = -1;
		
		while ((lump = Wads.FindLump(lumpName, lump + 1)) != -1) {
			Console.PrintF("'"..lumpName.."' ("..lump..") hash is '"..(MD5.Hash(WADs.ReadLump(lump))).."'");
		}
	}
	
	static bool LumpHasHash(string lumpName, string hash) {
		int lump = -1;
		
		while ((lump = Wads.FindLump(lumpName, lump + 1)) != -1) {
			if (MD5.Hash(WADs.ReadLump(lump)) == hash) {
				return true;
			}
		}
		
		return false;
	}
	
	override void OnRegister() {
		/* [AD MORTEM]
		
		   DeH_Actor_150 = Pumpkin Marine ✓
		   DeH_Actor_151, DeH_Actor_209 = Gargoyle ✓
		   DeH_Actor_152 = Satyr ✓
		   DeH_Actor_153 = Rocket Warrior ✓
		   DeH_Actor_156 = Skeleton ✓
		   DeH_Actor_158 = Gjenganger ✓
		   DeH_Actor_231 = Little Marine ✓ */
		bADMORTEM = NTMAi.LumpHasHash("DSFRE048", "0f76f6c24ac906634562a7aadf8f527f");
		
		/* [Eviternity]
		   
		   BaronOfHell = Annihilator
		   WolfensteinSS = Former Captain
		   CommanderKeen = Astral Cacodemon
		   BossBrain = Archangelus */
		bEviternity = NTMAi.LumpHasHash("XLT_EV15", "4a96b98efc9a0ab68ffd2533a3a3ee01");
		
		/* [MAYhem 2019]
		   
		   Chaingun = Tommy Gun ✓
		   RocketLauncher = Napalm Launcher ✓
		   PlasmaRifle = Flamethrower ✓
		   BFG9000 = Necronomicon
		   Zombieman = Zombie ✓
		   PainElemental = Hothead ✓
		   ChaingunGuy, WolfensteinSS = Tommy Gun Cultist ✓
		   ShotgunGuy = Shotgun Cultist ✓
		   Revenant = Vampire ✓
		   Demon = Skeleton ✓
		   Spectre = Shadow Imp ✓
		   HellKnight = Arachnorb
		   BaronOfHell = Mother Brain
		   LostSoul = Lightning Ball ✓
		   SpiderMastermind = Abbot
		   Arachnotron = Death Cube ✓
		   Cyberdemon = Minotaur
		   HangTSkull = Hellhound
		   CommanderKeen = Shadow Hellhound
		   Stalagtite = Satyr ✓
		   DeadLostSoul = Bat
		   HangBNoBrain = Mummy
		   HangTLookingDown = Ghost
		   HangTLookingUp = Tesla Coil
		   Meat2 = Inactive Tesla Coil
		   HangTNoBrain = Deep One
		   MBFHelperDog = Chainsaw Man
		   UnholyBible = Lich */
		bMAYhem2019 = NTMAi.LumpHasHash("DSTINK", "3ab1f8e2c9fd05ab647881bc7f5a3fc9");
		
		/* [Scythe 2]
		
		   WolfensteinSS = Evil Marine ✓
		   CommanderKeen = Afrit ✓ */
		bScythe2 = NTMAi.LumpHasHash("DEHACKED", "64fec1191ba91059d450ddfbe7ac1d7d");
		
		/* [Valiant]
		
		   BaronOfHell = Daedabus
		   HellKnight = Pyro Knight
		   SpiderMastermind = Cybruiser
		   Infrared = Spider Mastermind
		   MBFHelperDog = Arachnorb
		   Arachnotron = Arachnotron
		   Heart Column = Lightning Orb
		   DeadLostSoul = Kamikaze
		   BlueTorch = Diablo
		   TorchTree = Ghost Arch-Vile
		   BigTree = Ghost Revenant */
		bValiant = NTMAi.LumpHasHash("E1TEXT", "2363886efb272bb3dace286fd6475586");
	}
	
	/* ====
	   MATH
	   ==== */
	
	static double Lerp(double a, double b, double f) {
		return a + f * (b - a);
	}
	
	static Vector3 Lerp3(Vector3 a, Vector3 b, double f) {
		return (a + (f * (b - a)));
	}
	
	/* =======
	   ACTIONS
	   ======= */
	
	static void Explode(Actor caller, int damage = 128, int distance = 128, int flags = 0, name mod = "None") {
		if (!caller || damage <= 0 || distance <= 0) {
			return;
		}
		
		if (sv_ntm_blast) {
			// Do blast damage like Blood
			NTM_Blast blast = NTM_Blast(caller.Spawn("NTM_Blast", caller.pos));
			
			if (blast) {
				if (caller.bMissile) {
					blast.master = caller;
					blast.target = caller.target;
				} else {
					blast.target = caller;
				}
				
				blast.blastDamage = damage;
				blast.blastDamage2 = damage;
				blast.blastRadius = distance;
				blast.damageType = mod;
				blast.blastFlags = flags;
			}
		} else {
			caller.A_Explode(damage, distance, flags, damageType: mod);
		}
	}
	
	/* ======
	   PLAYER
	   ====== */
	
	void PlayerClearInventory(PlayerPawn pmo) {
		pmo.A_TakeInventory("NTM_Kick");
		pmo.A_TakeInventory("NTM_GrenadeThrow");
		pmo.A_TakeInventory("NTM_Bloody");
		pmo.A_TakeInventory("NTM_PistolShots");
		pmo.A_TakeInventory("NTM_Key_RedCard");
		pmo.A_TakeInventory("NTM_Key_YellowCard");
		pmo.A_TakeInventory("NTM_Key_BlueCard");
		pmo.A_TakeInventory("NTM_Key_RedSkull");
		pmo.A_TakeInventory("NTM_Key_YellowSkull");
		pmo.A_TakeInventory("NTM_Key_BlueSkull");
	}
	
	override void PlayerEntered(PlayerEvent e) {
		let pmo = players[e.playerNumber].mo;
		
		if (pmo) {
			PlayerClearInventory(pmo);
			
			if (!pmo.CountInv("NTM_System_Actor")) {
				pmo.A_GiveInventory("NTM_System_Actor", 1);
			}
			
			/* GROSS HACK: Reset NTM_Player's values in here instead of
						   PostBeginPlay(), because they persist between level
						   changes and can mess up things when spawning! */
			if (pmo is "NTM_Player") {
				NTM_Player nmo = NTM_Player(pmo);
				
				nmo.fallState = 0;
				nmo.fallTics = 0;
				nmo.fallTics2 = 0;
				
				nmo.oldHealth = nmo.health;
				nmo.painTics = 0;
				
				nmo.doorTics = 0;
				nmo.door = null;
				
				if (sv_ntm_startTwitch) {
					// Emulate Duke3D twitching using spawn angle
					nmo.A_SetViewAngle(nmo.DeltaAngle(nmo.angle, 0));
				}
			}
		}
	}
	
	override void PlayerRespawned(PlayerEvent e) {
		let pmo = players[e.playerNumber].mo;
		
		if (pmo) {
			PlayerClearInventory(pmo);
			DoThingRevive(pmo);
		}
	}
	
	override void NetworkProcess(ConsoleEvent e) {
		Name n = e.name;
		
		if (n == "NTM_Kick") {
			let pmo = players[e.player].mo;
			
			if (pmo && pmo is "NTM_Player" && !pmo.CountInv("NTM_Kick")) {
				pmo.A_GiveInventory("NTM_Kick");
				pmo.UseInventory(pmo.FindInventory("NTM_Kick"));
			}
		} else {
			if (n == "NTM_UseGrenade") {
				let p = players[e.player];
				
				if (p) {
					let pmo = p.mo;
					
					if (pmo && pmo is "NTM_Player" && (sv_infiniteAmmo || pmo.CountInv("NTM_GrenadeItem")) && !(p.readyWeapon is "NTM_GrenadeThrow")) {
						pmo.A_GiveInventory("NTM_GrenadeThrow");
						
						let grn = NTM_GrenadeThrow(pmo.FindInventory("NTM_GrenadeThrow"));
						
						if (grn) {
							grn.prevWeapon = p.readyWeapon.GetClassName();
							p.pendingWeapon = grn;
						}
					}
				}
			}
		}
	}
	
	/* =====
	   WORLD
	   ===== */
	
	override void WorldLoaded(WorldEvent e) {
		Name checksum = level.GetCheckSum();
		
		Console.PrintF(checksum);
		
		switch (checksum) {
			case 'acf3adec8c02b9431f347231354db5ad': // MAYhem 2019, MAP02
				S_ChangeMusic("D_NMAY2");
			break;
			
			case '497e6a94a957334e984b18c081de3c7a': // MAYhem 2019, MAP03
				S_ChangeMusic("D_NMAY3");
			break;
			
			case 'cfa89ac059dc9b3963a9cbb4d78f7508': // MAYhem 2019, MAP05
				S_ChangeMusic("D_NMAY5");
			break;
			
			case '89f4f1508de623a21b3e2525fd58022a': // MAYhem 2019, MAP09
				S_ChangeMusic("D_NMAY9");
			break;
			
			case 'bb6fa847527237c9e5987338078cee0d': // MAYhem 2019, MAP12
				S_ChangeMusic("D_NMAY12");
			break;
			
			case '3174909bca569ba357de67f6c47ae70e': // MAYhem 2019, MAP13
				S_ChangeMusic("D_NMAY13");
			break;
			
			case '19e476ab6f1b9cbebbb23046e95ad955': // MAYhem 2019, MAP14
				S_ChangeMusic("D_NMAY14");
			break;
			
			case '1d383dc934b35333a116a60f75441561': // MAYhem 2019, MAP32
				S_ChangeMusic("D_NMAY32");
			break;
		}
	}
	
	static void DoReplaceActor(Actor og, class<Actor> new) {
		bool ok;
		Actor rep;
		
		[ok, rep] = og.A_SpawnItemEx(new, flags: SXF_NoCheckPosition | SXF_TransferAmbushFlag | SXF_TransferPitch | SXF_TransferPointers | SXF_TransferSpecial | SXF_TransferRoll);
		
		if (rep) {
			og.Destroy();
		}
	}
	
	static void ReplaceSecret(Actor og, class<Actor> rep, int cvar) {
		if (cvar == 1) {
			NTMAi.DoReplaceActor(og, rep);
			
			return;
		}
		
		if (cvar >= 2) {
			let s = og.curSector;
			
			if (s && !s.IsSecret()) {
				NTMAi.DoReplaceActor(og, rep);
			}
		}
	}
	
	override void WorldThingSpawned(WorldEvent e) {
		let mo = e.thing;
		
		if (mo && mo.bIsMonster && !mo.CountInv("NTM_System_Actor")) {
			mo.A_GiveInventory("NTM_System_Actor", 1);
		}
	}
	
	override void WorldThingDied(WorldEvent e) {
		let mo = e.thing;
		bool boo = mo.bIsMonster;
		
		if (boo || mo is "PlayerPawn") {
			mo.bXFlip = Random(0, 1);
		}
		
		// Add a small chance for Zombies to drop grenades
		if (boo) {
			class<Actor> s = mo.species;
			
			if (((mo is "Zombieman" || s is "Zombieman")
			    || (mo is "ShotgunGuy" || s is "ShotgunGuy")
				|| (mo is "ChaingunGuy" || s is "ChaingunGuy"))
				&& mo.GetDropItems() != null) {
				mo.A_DropItem("NTM_GrenadeItem", 1, 32);
			}
		}
	}
	
	override void WorldThingGround(WorldEvent e) {
		let mo = e.thing;
		
		if (mo) {
			mo.A_XScream();
			
			if (mo.ceilingZ == mo.GetZAt(0, 0, 0, GZF_Ceiling)) {
				mo.A_SpawnItemEx("NTM_GibMeat", flags: SXF_TransferTranslation);
			}
		}
	}
	
	override void WorldThingRevived(WorldEvent e) {
		DoThingRevive(e.thing);
	}
	
	void DoThingRevive(Actor mo) {
		if (mo.CountInv("NTM_System_Actor")) {
			let actorSystem = NTM_System_Actor(mo.FindInventory("NTM_System_Actor"));
			
			actorSystem.dead = false;
			actorSystem.gibbed = false;
			actorSystem.crushed = false;
		}
		
		mo.bXFlip = mo.default.bXFlip;
		mo.scale = mo.default.scale;
		
		if (!(mo is "PlayerPawn")) {
			mo.translation = mo.default.translation;
		}
	}
	
	override void WorldLinePreActivated(WorldEvent e) {
		let mo = e.thing;
		Line l = e.activatedLine;
		
		// If this is a locked door, check if we can play a keycard animation
		if (mo is "NTM_Player" && l.special == 13 && sv_ntm_keycard) {
			bool lock = false;
			NTM_Player pmo = NTM_Player(mo);
			
			if (pmo.door != l) {
				switch (l.args[3]) {
					case 1:
						if (UseKey(e, "RedCard", "NTM_Key_RedCard")) {
							lock = true;
						}
					break;
					
					case 2:
						if (UseKey(e, "BlueCard", "NTM_Key_BlueCard")) {
							lock = true;
						}
					break;
					
					case 3:
						if (UseKey(e, "YellowCard", "NTM_Key_YellowCard")) {
							lock = true;
						}
					break;
					
					case 4:
						if (UseKey(e, "RedSkull", "NTM_Key_RedSkull")) {
							lock = true;
						}
					break;
					
					case 5:
						if (UseKey(e, "BlueSkull", "NTM_Key_BlueSkull")) {
							lock = true;
						}
					break;
					
					case 6:
						if (UseKey(e, "YellowSkull", "NTM_Key_YellowSkull")) {
							lock = true;
						}
					break;
					
					case 100:
						if (UseKey(e, "RedCard", "NTM_Key_RedCard") || UseKey(e, "RedSkull", "NTM_Key_RedSkull")
						    || UseKey(e, "BlueCard", "NTM_Key_BlueCard") || UseKey(e, "BlueSkull", "NTM_Key_BlueSkull")
							|| UseKey(e, "YellowCard", "NTM_Key_YellowCard") || UseKey(e, "YellowSkull", "NTM_Key_YellowSkull")) {
							lock = true;
						}
					break;
					
					case 129:
					case 132:
						if (UseKey(e, "RedCard", "NTM_Key_RedCard") || UseKey(e, "RedSkull", "NTM_Key_RedSkull")) {
							lock = true;
						}
					break;
					
					case 130:
					case 133:
						if (UseKey(e, "BlueCard", "NTM_Key_BlueCard") || UseKey(e, "BlueSkull", "NTM_Key_BlueSkull")) {
							lock = true;
						}
					break;
					
					case 131:
					case 134:
						if (UseKey(e, "YellowCard", "NTM_Key_YellowCard") || UseKey(e, "YellowSkull", "NTM_Key_YellowSkull")) {
							lock = true;
						}
					break;
				}
			}
			
			if (lock) {
				// Queue this door so we can open it after the animation
				pmo.door = l;
				pmo.doorTics = 24;
				e.shouldActivate = false;
			}
		}
	}
	
	bool UseKey(WorldEvent e, class<Key> keyItem, class<NTM_Key> keyAnim) {
		Actor pmo = e.thing;
		
		if (pmo.CountInv(keyItem)) {
			let p = pmo.player;
			
			if (p && !(p.readyWeapon is keyAnim)) {
				let prevWeapon = p.readyWeapon;
				
				pmo.A_GiveInventory(keyAnim);
				
				let keycard = NTM_Key(pmo.FindInventory(keyAnim));
				
				if (keycard) {
					keycard.prevWeapon = prevWeapon.GetClassName();
					p.pendingWeapon = keycard;
				} else {
					return false;
				}
				
				return true;
			}
		}
		
		return false;
	}
	
	/* ===========
	   REPLACEMENT
	   =========== */
	
	override void CheckReplacement(ReplaceEvent e) {
		switch (e.replacee.GetClassName()) {
			case 'RocketAmmo':
				if (sv_ntm_r_custom && bMAYhem2019) {
					e.replacement = "NTM_NapalmAmmo";
				}
			break;
			
			case 'Chaingun':
				if (sv_ntm_r_custom && bMAYhem2019) {
					e.replacement = "NTM_TommyGun";
					
					break;
				}
				
				e.replacement = "NTM_Chaingun";
			break;
			
			case 'RocketLauncher':
				if (sv_ntm_r_custom && bMAYhem2019) {
					e.replacement = "NTM_NapalmLauncher";
					
					break;
				}
				
				e.replacement = "NTM_RocketLauncher";
			break;
			
			case 'PlasmaRifle':
				if (sv_ntm_r_custom && bMAYhem2019) {
					e.replacement = "NTM_Flamethrower";
					
					break;
				}
				
				e.replacement = "NTM_PlasmaRifle";
			break;
			
			case 'BFG9000':
				if (sv_ntm_r_custom  && bMAYhem2019) {
					//e.replacement = "NTM_Necronomicon";
					
					break;
				}
				
				e.replacement = "NTM_BFG9000";
			break;
			
			case 'Zombieman':
				if (sv_ntm_r_zombieman) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						e.replacement = "NTM_Zombie";
						
						break;
					}
					
					e.replacement = "NTM_Zombieman";
				}
			break;
			
			case 'ShotgunGuy':
				if (sv_ntm_r_shotgunGuy) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						e.replacement = "NTM_ShotgunCultist";
						
						break;
					}
					
					e.replacement = "NTM_ShotgunGuy";
				}
			break;
			
			case 'ChaingunGuy':
				if (sv_ntm_r_heavyWeaponDude) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						e.replacement = "NTM_TommyGunCultist";
						
						break;
					}
					
					e.replacement = "NTM_ChaingunGuy";
				}
				
			break;
			
			case 'DoomImp':
				if (sv_ntm_r_imp) {
					e.replacement = "NTM_Imp";
				}
			break;
			
			case 'LostSoul':
				if (sv_ntm_r_lostSoul) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						e.replacement = "NTM_LightningOrb";
						
						break;
					}
					
					e.replacement = "NTM_LostSoul";
				}
			break;
			
			case 'Demon':
				if (sv_ntm_r_demon) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						e.replacement = "NTM_Skeleton2";
						
						break;
					}
					
					e.replacement = "NTM_Demon";
				}
			break;
			
			case 'Spectre':
				if (sv_ntm_r_spectre) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						e.replacement = "NTM_ShadowImp";
						
						break;
					}
					
					e.replacement = "NTM_Spectre";
				}
			break;
			
			case 'Cacodemon':
				if (sv_ntm_r_cacodemon) {
					e.replacement = "NTM_Cacodemon";
				}
			break;
			
			case 'HellKnight':
				if (sv_ntm_r_hellKnight) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						//e.replacement = "NTM_Arachnorb";
						
						break;
					}
					
					e.replacement = "NTM_HellKnight";
				}
			break;
			
			case 'BaronOfHell':
				if (sv_ntm_r_baronOfHell) {
					if (sv_ntm_r_custom) {
						if (bEviternity) {
							//e.replacement = NTM_Cybruiser;
							
							break;
						}
						
						if (bMAYhem2019) {
							//e.replacement = NTM_MotherBrain;
							
							break;
						}
					}
					
					e.replacement = "NTM_BaronOfHell";
				}
			break;
			
			case 'Arachnotron':
				if (sv_ntm_r_arachnotron) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						e.replacement = "NTM_DeathCube";
						
						break;
					}
					
					e.replacement = "NTM_Arachnotron";
				}
			break;
			
			case 'PainElemental':
				if (sv_ntm_r_painElemental) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						e.replacement = "NTM_Hothead";
						
						break;
					}
					
					e.replacement = "NTM_PainElemental";
				}
			break;
			
			case 'Revenant':
				if (sv_ntm_r_revenant) {
					e.replacement = "NTM_Revenant";
				}
			break;
			
			case 'Fatso':
				if (sv_ntm_r_mancubus) {
					e.replacement = "NTM_Mancubus";
				}
			break;
			
			case 'Archvile':
				if (sv_ntm_r_archVile) {
					e.replacement = "NTM_ArchVile";
				}
			break;
			
			case 'Cyberdemon':
				if (sv_ntm_r_cyberdemon) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						//e.replacement = "NTM_Minotaur";
						
						break;
					}
					
					e.replacement = "NTM_Cyberdemon";
				}
			break;
			
			case 'SpiderMastermind':
				if (sv_ntm_r_spiderMastermind) {
					if (sv_ntm_r_custom && bMAYhem2019) {
						//e.replacement = "NTM_Abbot";
						
						break;
					}
					
					e.replacement = "NTM_SpiderMastermind";
				}
			break;
			
			case 'WolfensteinSS':
				if (sv_ntm_r_ss) {
					if (sv_ntm_r_custom) {
						if (bEviternity) {
							// e.replacement = "NTM_FormerCaptain";
							
							break;
						}
						
						if (bMAYhem2019) {
							e.replacement = "NTM_TommyGunCultist2";
							
							break;
						}
						
						if (bScythe2) {
							e.replacement = "NTM_EvilMarine";
							
							break;
						}
					}
					
					e.replacement = "NTM_German";
				}
			break;
			
			case 'CommanderKeen':
				if (sv_ntm_r_custom) {
					if (bEviternity) {
						//e.replacement = "NTM_AstralCacodemon";
						
						break;
					}
					
					if (bScythe2) {
						e.replacement = "NTM_Afrit";
						
						break;
					}
				}
			break;
			
			// AD MORTEM
			case 'DeH_Actor_150':
				if (sv_ntm_r_custom && bADMORTEM) {
					e.replacement = "NTM_PumpkinMarine";
				}
			break;
			
			case 'DeH_Actor_151':
				if (sv_ntm_r_custom && bADMORTEM) {
					e.replacement = "NTM_Gargoyle";
				}
			break;
			
			case 'DeH_Actor_152':
				if (sv_ntm_r_custom && bADMORTEM) {
					e.replacement = "NTM_Satyr";
				}
			break;
			
			case 'DeH_Actor_153':
				if (sv_ntm_r_custom && bADMORTEM) {
					e.replacement = "NTM_RocketWarrior";
				}
			break;
			
			case 'DeH_Actor_156':
				if (sv_ntm_r_custom && bADMORTEM) {
					e.replacement = "NTM_Skeleton";
				}
			break;
			
			case 'DeH_Actor_158':
				if (sv_ntm_r_custom && bADMORTEM) {
					e.replacement = "NTM_Gjenganger";
				}
			break;
			
			case 'DeH_Actor_209':
				if (sv_ntm_r_custom && bADMORTEM) {
					e.replacement = "NTM_Gargoyle2";
				}
			break;
			
			case 'DeH_Actor_231':
				if (sv_ntm_r_custom && bADMORTEM) {
					e.replacement = "NTM_LittleMarine";
				}
			break;
			
			// MAYhem2019
			case 'Stalagtite':
				if (sv_ntm_r_custom && bMAYhem2019) {
					e.replacement = "NTM_Satyr2";
					
					break;
				}
			break;
		}
	}
	
	override void CheckReplacee(ReplacedEvent e) {
		switch (e.replacement.GetClassName()) {
			case 'NTM_Chaingun':
			case 'NTM_TommyGun':
				e.replacee = "Chaingun";
			break;
			
			case 'NTM_RocketLauncher':
			case 'NTM_NapalmLauncher':
				e.replacee = "RocketLauncher";
			break;
			
			case 'NTM_PlasmaRifle':
			case 'NTM_Flamethrower':
				e.replacee = "PlasmaRifle";
			break;
			
			case 'NTM_BFG9000':
				e.replacee = "BFG9000";
			break;
			
			case 'NTM_Zombieman':
			case 'NTM_Zombie':
				e.replacee = "Zombieman";
			break;
			
			case 'NTM_ShotgunGuy':
			case 'NTM_ShotgunCultist':
				e.replacee = "ShotgunGuy";
			break;
			
			case 'NTM_ChaingunGuy':
			case 'NTM_TommyGunCultist':
				e.replacee = "ChaingunGuy";
			break;
			
			case 'NTM_DoomImp':
				e.replacee = "DoomImp";
			break;
			
			case 'NTM_Demon':
			case 'NTM_Skeleton2':
				e.replacee = "Demon";
			break;
			
			case 'NTM_Spectre':
			case 'NTM_ShadowImp':
				e.replacee = "Spectre";
			break;
			
			case 'NTM_LostSoul':
			case 'NTM_LightningOrb':
				e.replacee = "LostSoul";
			break;
			
			case 'NTM_Cacodemon':
				e.replacee = "Cacodemon";
			break;
			
			case 'NTM_HellKnight':
				e.replacee = "HellKnight";
			break;
			
			case 'NTM_BaronOfHell':
				e.replacee = "BaronOfHell";
			break;
			
			case 'NTM_Arachnotron':
			case 'NTM_DeathCube':
				e.replacee = "Arachnotron";
			break;
			
			case 'NTM_PainElemental':
			case 'NTM_Hothead':
				e.replacee = "PainElemental";
			break;
			
			case 'NTM_Revenant':
				e.replacee = "Revenant";
			break;
			
			case 'NTM_Mancubus':
				e.replacee = "Fatso";
			break;
			
			case 'NTM_ArchVile':
				e.replacee = "ArchVile";
			break;
			
			case 'NTM_Cyberdemon':
				e.replacee = "Cyberdemon";
			break;
			
			case 'NTM_SpiderMastermind':
				e.replacee = "SpiderMastermind";
			break;
			
			case 'NTM_German':
			case 'NTM_TommyGunCultist2':
			case 'NTM_EvilMarine':
				e.replacee = "WolfensteinSS";
			break;
			
			//case 'NTM_AstralCacodemon':
			case 'NTM_Afrit':
				e.replacee = "CommanderKeen";
			break;
			
			// AD MORTEM
			case 'NTM_PumpkinMarine':
				e.replacee = "DeH_Actor_150";
			break;
			
			case 'NTM_Gargoyle':
				e.replacee = "DeH_Actor_151";
			break;
			
			case 'NTM_Satyr':
				e.replacee = "DeH_Actor_152";
			break;
			
			case 'NTM_RocketWarrior':
				e.replacee = "DeH_Actor_153";
			break;
			
			case 'NTM_Skeleton':
				e.replacee = "DeH_Actor_156";
			break;
			
			case 'NTM_Gjenganger':
				e.replacee = "DeH_Actor_158";
			break;
			
			case 'NTM_Gargoyle2':
				e.replacee = "DeH_Actor_209";
			break;
			
			case 'NTM_LittleMarine':
				e.replacee = "DeH_Actor_231";
			break;
			
			// MAYhem 2019
			case 'NTM_NapalmAmmo':
				e.replacee = "RocketAmmo";
			break;
			
			case 'NTM_Satyr2':
				e.replacee = "Stalagtite";
			break;
		}
	}
}

// System Base
class NTM_System : Inventory {
	Default {
		Inventory.MaxAmount 1;
		FloatBobPhase 0;
		
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.AutoActivate
	}
	
	States {
		Use:
			TNT1 A 0;
			Fail;
		
		Pickup:
			TNT1 A 0 {
				return true;
			}
			
			Stop;
	}
}

// Actor System
class NTM_System_Actor : NTM_System {
	bool dead, gibbed, crushed, chopped, rKO;
	int fallTics, footprintState, footprintTics, footprintSide, deathLastFrame;
	double deathLastHeight;
	Actor gibDummy, bloodPool, footprintBloodPool;
	
	override void PostBeginPlay() {
		super.PostBeginPlay();
		footprintSide = -1;
		deathLastFrame = -1;
	}
	
	override void Tick() {
		// Monster/Player death effects
		if (owner.health <= 0) {
			// Blood: Jittering death animation
			if (sv_ntm_enemyMove == 1 && !owner.bBoss && !(owner is "PlayerPawn")) {
				int frame = owner.curState.frame;
				
				if (deathLastFrame != frame) {
					TextureID tex = owner.curState.GetSpriteTexture(0);
					
					if (tex) {
						Vector2 spriteSize = TexMan.GetScaledSize(tex);
						double spriteHeight = spriteSize.y;
						
						if (frame > 0 && owner.waterLevel == 0) {
							double jitter = Max(0, (deathLastHeight - spriteHeight) * 0.5);
							
							owner.SetOrigin(owner.pos + (0, 0, owner.scale.y * jitter), false);
							owner.ClearInterpolation();
						}
						
						deathLastFrame = frame;
						deathLastHeight = spriteHeight;
					}
				}
			}
			
			if (!owner.bNoBlood) {
				// Duke Nukem 3D: Blood splatter on long falls
				if (owner.pos.z <= owner.floorZ || owner.bOnMObj) {
					if (fallTics > 18 && owner.waterLevel == 0) {
						for (int i; i < Random(3, 6); i++) {
							owner.A_SpawnItemEx("NTM_FlyingBlood", 0, 0, 0, Random(-8, 8), Random(-8, 8), Random(3, 8), 0, SXF_UseBloodColor);
						}
						
						owner.A_StartSound("NTM_System_Actor/pancake");
					}
					
					fallTics = 0;
				} else {
					if (!(owner is "PlayerChunk")) {
						++fallTics;
					}
				}
				
				if (!dead) {
					if (!gibbed) {
						// Common: Ludicrous gibs and taunting
						if (owner.health < owner.GetGibHealth()) {
							for (int i; i < Random(5, 8); i++) {
								if (i >= 0 && i <= 2) {
									owner.A_SpawnItemEx("NTM_FlyingGib"..(i + 1), 0, 0, 0, Random(-10, 10), Random(-10, 10), Random(8, 12), 0, SXF_UseBloodColor);
								}
								
								owner.A_SpawnItemEx("NTM_FlyingBlood", 0, 0, 0, Random(-8, 8), Random(-8, 8), Random(3, 8), 0, SXF_UseBloodColor);
							}
							
							let killer = owner.target;
							
							if (killer is "NTM_Player" && killer.health > 0 && !Random(0, 16)) {
								killer.A_StartSound("NTM_Player/taunt", Chan_Voice);
							}
							
							gibbed = true;
						}
					}
					
					dead = true;
				}
				
				// Duke Nukem 3D & Shadow Warrior: Blood pools
				if (!bloodPool && owner.health < (owner.GetGibHealth() * 0.666) && !(owner is "PlayerChunk") && owner.vel.Length() == 0) {
					double fz = owner.floorZ;
					
					if (owner.pos.z <= fz && fz == owner.GetZAt(1, 0, 0, GZF_AbsoluteAng)) {
						bool result;
						Actor bloodP;
						
						[result, bloodP] = owner.A_SpawnItemEx("NTM_BloodPool", flags: SXF_UseBloodColor);
						
						if (bloodP) {
							// Slightly offset the blood pool so there's no
							// Z-fighting in software mode
							bloodPool = bloodP;
							bloodP.target = owner;
							bloodP.SetOrigin(owner.pos + (1, 0, 0), false);
						}
					}
				}
				
				// Common: Gibbable corpses
				bool isGibbable = dead && !gibbed && !crushed && owner.curState.tics == -1 && !owner.bNoBlood && !owner.bBoss;
				
				if (gibDummy) {
					if (!isGibbable) {
						gibDummy.Destroy();
						gibDummy = null;
					}
				} else {
					if (isGibbable) {
						let mo = NTM_Dummy_Gib(Actor.Spawn("NTM_Dummy_Gib", owner.pos));
						
						if (mo) {
							gibDummy = mo;
							gibDummy.tracer = owner;
							gibDummy.health = -owner.GetGibHealth() * 0.25;
							gibDummy.A_SetSize(owner.radius, owner.height);
						}
					}
				}
				
				// Shadow Warrior: Gore effects on melee kill
				if (!chopped && owner.damageTypeReceived == "Chainsaw") {
					for (int i = 0; i < 2; ++i) {
						owner.A_SpawnItemEx("NTM_FlyingBlood", 8, 4, 28, FRandom(2, 5), FRandom(-5, -2), FRandom(2, 6), 0, SXF_UseBloodColor);
					}
					
					owner.A_StartSound("NTM_Chainsaw/slash", Chan_Body, ChanF_Overlap);
					owner.A_GiveToTarget("NTM_Bloody", 1);
					chopped = true;
				}
			}
			
			// Shadow Warrior: Knockback on powerful weapons
			if (!rKO && !owner.bBoss && (owner.damageTypeReceived == "Berserk" || owner.damageTypeReceived == "SuperShotgun")) {
				let killer = owner.target;
				
				if (killer) {
					double dist = owner.Distance3D(killer);
					
					if (dist > 0) {
						double force = (8 / Max(1, dist * 0.005)) * (100 / Max(100, owner.mass * 0.32));
						
						if (force > 1.25) {
							owner.A_FaceTarget();
							owner.A_ChangeVelocity(-force, 0, force * 0.8, CVF_Relative);
						}
					}
				}
				
				rKO = true;
			}
		} else {
			// Duke Nukem 3D & Shadow Warrior: Bloody Footprints
			if (owner is "PlayerPawn" && owner.pos.z <= owner.floorZ) {
				if (owner.vel.Length() > 0) {
					--footprintTics;
					++footprintState;
					
					if (footprintState >= 8) {
						if (footprintTics > 0 && footprintBloodPool) {
							bool result;
							Actor footprint;
							double ang = owner.angle;
							
							[result, footprint] = footprintBloodPool.A_SpawnItemEx("NTM_BloodyFootprint", angle: ang, flags: SXF_TransferTranslation | SXF_AbsoluteAngle | SXF_NoCheckPosition);
							
							if (footprint) {
								double footAngle = ang + (footprintSide * 90);
								
								footprint.SetOrigin((owner.pos.x + Cos(footAngle) * 5, owner.pos.y + Sin(footAngle) * 5, owner.pos.z), false);
							}
						}
						
						footprintState = 0;
						footprintSide *= -1;
					}
				} else {
					footprintSide = -1;
					footprintState = 0;
				}
			}
			
			// Reset all death mechanics
			deathLastFrame = -1;
			bloodPool = null;
			
			if (gibDummy) {
				gibDummy.Destroy();
				gibDummy = null;
			}
		}
		
		Super.Tick();
	}
}

// Gib Dummy
class NTM_Dummy_Gib : Actor {
	Default {
		+DontGib
		+NotOnAutomap
		+NoGravity
		+Vulnerable
		-Synchronized
	}
	
	States {
		Spawn:
			TNT1 A -1;
			Stop;
		
		Death:
			NMG2 A 0 {
				if (tracer) {
					tracer.A_StartSound("misc/gibbed");
					tracer.sprite = GetSpriteIndex("NMG2");
					tracer.scale = (0.666, 0.666);
					
					if (!(tracer is "PlayerPawn")) {
						tracer.translation = tracer.bloodTranslation;
					}
					
					tracer.health = tracer.GetGibHealth() - 1;
					
					for (int i; i < Random(5, 8); i++) {
						if (i >= 0 && i <= 2) {
							tracer.A_SpawnItemEx("NTM_FlyingGib"..(i + 1), 0, 0, 0, Random(-10, 10), Random(-10, 10), Random(8, 12), 0, SXF_UseBloodColor);
						}
						
						tracer.A_SpawnItemEx("NTM_FlyingBlood", 0, 0, 0, Random(-8, 8), Random(-8, 8), Random(3, 8), 0, SXF_UseBloodColor);
					}
					
					let actorSystem = NTM_System_Actor(tracer.FindInventory("NTM_System_Actor"));
					
					if (actorSystem) {
						actorSystem.gibbed = true;
					}
				}
			}
			
			Stop;
	}
	
	override void Tick() {
		Super.Tick();
		
		if (tracer) {
			SetOrigin(tracer.pos, false);
		} else {
			Destroy();
		}
	}
}